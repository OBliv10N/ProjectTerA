#include <SFML/Graphics.hpp>
#include <time.h>
#include <iostream>
using namespace sf;
using namespace std;

const int displaywidth = 10;
const int displaydheight = 23;

int display[displaydheight][displaywidth] = {0};  //size of display//

struct block {
    int x, y;
}
b[4] = { {1,0},{1,1},{1,2},{1,3} }, w[4];

block blocks[7][4] = {    //blocks//
 
 { {1,0},{1,1},{1,2},{1,3} },

 { {0,1},{1,1},{1,2},{2,2} },

 { {0,1},{1,1},{2,1},{1,2} },

 { {0,0},{1,0},{1,1},{1,2} },

 { {0,1},{1,1},{0,2},{1,2} },

 { {0,2},{1,1},{1,2},{2,1} },

 { {1,0},{1,1},{1,2},{2,0} }   
              
};

class Game {
    public:

        int m = 0;
        int Num = 1;
        int point = 0;
        bool rotation = false;
        float timer = 0;
        float delay = 0.3;

        bool check();
        bool gameover();
        void rotate();
        void move();
        void checkline();
        void godown();
        void MenuGameOver();
        void score();
        Game();
};

//check cash display//

bool Game::check() {

    for (int i = 0; i < 4; i++)
        if (b[i].x < 0 || b[i].x >= displaywidth || b[i].y >= displaydheight) return 0;
        else if (display[b[i].y][b[i].x] != 0) return 0;

    return 1;
}

//game over//
 
bool Game::gameover() {

    for (int i = 0; i < displaywidth; i++) {
        if (b[i].x == display[b[i].y][b[i].x]) return true;
    }      
    return false;
}

void Game::MenuGameOver() {

    if (gameover() == false) {

        RenderWindow window(VideoMode(320, 480), "Play Game!");
        Texture BG;
        BG.loadFromFile("image/tiles.png");
    }
}

//rotate//

void Game::rotate() {

    if (rotation) {
        block p = b[1];
        int x, y;

        for (int i = 0; i < 4; i++) {
            x = b[i].y - p.y;
            y = b[i].x - p.x;
            b[i].x = p.x - x;
            b[i].y = p.y + y;
        }
    }
    if (!check()) {
        for (int i = 0; i < 4; i++) b[i] = w[i];
    }
}

//move//

void Game::move() {

    for (int i = 0; i < 4; i++) {
        w[i].x = b[i].x;
        b[i].x += m;
    }
    if (!check()) {
        for (int i = 0; i < 4; i++) b[i] = w[i];
    }
}

//godown//

void Game::godown() {

    if (timer > delay) {
        for (int i = 0; i < 4; i++) {
            w[i] = b[i];
            b[i].y += 1;
        }
        if (!check()) {
            for (int i = 0; i < 4; i++) {
                display[w[i].y][w[i].x] = Num;
            }
            Num = 1 + rand() % 7;

            int N = rand() % 7;

            for (int i = 0; i < 4; i++) {
                b[i].x = blocks[N][i].x;
                b[i].y = blocks[N][i].y;
            }
        }
        timer = 0;
    }
}

/*void Game::score() {

    RenderWindow window(VideoMode(320, 480), "Play Game!");

    while (window.isOpen()) {
        Font sc;
        sc.loadFromFile("Pixellari");
        Text ss;
        ss.setCharacterSize(20);
        ss.setPosition({ 5,5 });
        ss.setFont(sc);

        cout << "SCORE: " << point;
    }
}*/

//checkline + Point//

void Game::checkline() {

    int k = displaydheight - 1;

    for (int i = displaydheight - 1; i > 0; i--) {
        int count = 0;

        for (int j = 0; j < displaywidth; j++) {
            if (display[i][j] != 0) count++;
            display[k][j] = display[i][j];
        }
        if (count < displaywidth) k--;  //delete Array (pointer);
    }
    if (k == 0) point = point + 5;
}


//GameTetris//

Game::Game() {

    srand(time(0));

    RenderWindow window(VideoMode(320, 480), "Play Game!");    //size of windows & name//

    Clock t;

    Font sc;

    Texture c,A,B;
    B.loadFromFile("image/display.png");
    A.loadFromFile("image/menu.png");
    c.loadFromFile("image/tiles.png");

    Sprite s(c) , s1, s2;
    s1.setTexture(A);
    s2.setTexture(B);

    while (window.isOpen()) {

        float time = t.getElapsedTime().asSeconds();
        t.restart();
        timer += time;

        Event event;

        while (window.pollEvent(event)) {
            if (event.type == Event::Closed) window.close();

            if (Keyboard::isKeyPressed(Keyboard::Up)) rotation = true;
            else if (Keyboard::isKeyPressed(Keyboard::Left)) m = -1;
            else if (Keyboard::isKeyPressed(Keyboard::Right)) m = 1;
        }
        if (Keyboard::isKeyPressed(Keyboard::Down)) delay = 0.01;   //for go down quick//

        rotate();
        move();
        godown();
        checkline();
        gameover();

        m = 0; rotation = 0; delay = 0.3;
        window.clear(Color::Black);
        window.draw(s2);

        for (int i = 0; i < displaydheight; i++) {
            for (int j = 0; j < displaywidth; j++) {
                if (display[i][j] == 0) continue;

                s.setTextureRect(IntRect(display[i][j] * 18, 0, 18, 18));
                s.setPosition(j * 18, i * 18);
                s.move(24, 24);
                window.draw(s);
            }
        }

        m = 0; rotation = false; delay = 0.5;

        for (int i = 0; i < 4; i++) {
            s.setTextureRect(IntRect(Num * 18, 0, 18, 18));
            s.setPosition(b[i].x * 18, b[i].y * 18);
            s.move(24, 24);
            window.draw(s);
        }
        window.display();
    }
}


int main() {

    RenderWindow window(VideoMode(320, 480), "Play Game!");
    Game Tetris;

    return 0;
}
